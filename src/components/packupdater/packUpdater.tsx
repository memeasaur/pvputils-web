'use client';
import React, {ChangeEvent, useEffect, useRef, useState} from "react";
import {PackUpdateWorkerFormData, PackUpdateWorkerRequest, PackUpdateWorkerResponse} from './types';
import {createClient} from "@supabase/supabase-js";
import {Database} from "@/lib/supabase";
import {SUPABASE_URL, SUPABASE_KEY} from "@/app/constants";

const VERSION = 0.9 // TODO -> dynamically get this from supabase
export default function PackUpdater() {
    const [history, setHistory] = useState<Database["public"]["Tables"]["packupdater_cache"]["Row"][]>([]);
    useEffect(() => {
        (async () => {
            const {
                data: packUpdaterHistoryData,
                error: error2
            } = await createClient<Database>(SUPABASE_URL, SUPABASE_KEY)
                .from('packupdater_cache')
                .select('*')
            if (error2)
                throw new Error(error2.message)
            setHistory(packUpdaterHistoryData)
        })()
    })
    const [updatedPacks, setUpdatedPacks] = useState<PackUpdateWorkerResponse[]>([]);
    const [packUpdaterMessages, setPackUpdaterMessages] = useState<string[]>([]);
    const workersCounter = useRef(0)
    const tasks = useRef<PackUpdateWorkerRequest[]>([])
    return ( // TODO -> this shit should NOT be a form, at least not one that isn't able to message web workers
        <div className={"grid grid-cols-2 w-max auto-cols-auto gap-4"}>
            <form className={"flex flex-col gap-2"}>
                <div className={"flex flex-col gap-1"}>
                    <label className={"flex gap-2"}>
                        <input name={"isPackNameWatermarkEnabled"} defaultChecked type={"checkbox"}/>pack name
                        watermark <i>customizable</i>
                    </label>
                    <div className={"flex gap-2"}>
                        <input type={"checkbox"} className={"invisible"}/>
                        <input name={"packNameWatermark"} placeholder={"(1.21.4)"} type={"text"} onClick={e => {
                            const target = e.currentTarget
                            if (!target.value)
                                target.value = target.placeholder
                        }}/>
                    </div>
                </div>

                <div className={"flex flex-col gap-1"}>
                    <label className={"flex gap-2"}>
                        <input name={"isPackDescriptionWatermarkEnabled"} defaultChecked type={"checkbox"}/>pack
                        description watermark <i>customizable</i>
                    </label>
                    <div className={"flex gap-2"}>
                        <input type={"checkbox"} className={"invisible"}/>
                        <input name={"packDescriptionWatermark"}
                               placeholder={"(generated by pvputils.vercel.app, v" + VERSION + ")"} type={"text"}
                               onClick={e => {
                                   const target = e.currentTarget
                                   if (!target.value)
                                       target.value = target.placeholder // TODO -> I can't do this in a function because im too stupid
                               }}/>
                    </div>
                </div>

                <label className={"flex gap-2"}>
                    <input name={"isNetheriteWeapons"} defaultChecked type={"checkbox"} onChange={e =>
                        handleCheckboxHiddenVanillaDiv("generatedNetheriteConfig", e)}></input>generate netherite by
                    recoloring pack&#39;s diamond
                </label>
                <div id={"generatedNetheriteConfig"} className={"flex gap-1"}>
                    <input type={"checkbox"} className={"invisible"}/>
                    <div className={"flex flex-col gap-1"}>
                        <div className={"flex gap-1"}>
                            <label className={"flex gap-1"}>
                                <input name={"blendMode"} defaultChecked type={"radio"} value={"multiply"}/>multiply
                                (darker)
                            </label>
                            <label className={"flex gap-1"}>
                                <input name={"blendMode"} type={"radio"} value={"overlay"}/>overlay (lighter)
                            </label>
                        </div>
                        <label className={"flex gap-1"}>
                            <input defaultChecked name={"isNetheriteTools"} type={"checkbox"}/>tools included
                        </label>
                    </div>
                </div>
                {/*<label className={"flex gap-2"}>*/}
                {/*    <input type={"text"}/>*/}
                {/*</label>TODO -> custom netherite colors option*/}

                <label className={"flex gap-2"}>
                    <input name={"isBlinkingHeartSpriteRemoved"} defaultChecked type={"checkbox"}></input>remove
                    blinking heart sprites
                </label>
                <label className={"flex gap-2"}>
                    <input name={"isWitherHeartSpriteRecolored"} defaultChecked type={"checkbox"}></input>recolor wither
                    heart sprites white
                </label>
                {/*TODO -> choose wither heart recolor color*/}
                {/*<label className={"flex gap-2"}>*/}
                {/*    <input defaultChecked type={"checkbox"}></input>*/}
                {/*    make string red*/}
                {/*</label>TODO remove, pretty sure you can pearl through string now anyway*/}

                <label className={"flex gap-2"}>
                    <input name={"isModernBasePackEnabled"} type={"checkbox"} onChange={e =>
                        handleCheckboxHiddenVanillaDiv("hiddenBasePackUploads", e)}></input>
                    use modern base pack <span>(<a href={"https://faithfulpack.net/"} target={"_blank"}
                                                   style={{color: "blue", textDecoration: 'underline'}}>faithful</a> recommended)</span>
                </label>
                <div id={"hiddenBasePackUploads"} hidden={true} className={"flex gap-2"}
                     title={"based on grass_top.png"}>
                    <input type={"checkbox"} className={"invisible"}/>
                    <div className={"flex flex-col gap-2"}>
                        <label className={"flex gap-2 justify-between"}>
                            default<input name={"defaultPack"} type={"file"}></input>
                        </label>
                        <label className={"flex gap-2 justify-between"}>
                            if 64x64+<input name={"64xPack"} type={"file"}></input>
                        </label>
                        <label className={"flex gap-2 justify-between"}>
                            else if 32x32<input name={"32xPack"} type={"file"}></input>
                        </label>
                        <label className={"flex gap-2 justify-between"}>
                            else if 16x16<input name={"16xPack"} type={"file"}></input>
                        </label>
                        <i>
                            updater picks from these, if present, for each pack
                        </i>
                    </div>
                </div>

                <label className={"flex gap-2"}>
                    <input name={"isBackwardCompatible"} type={"checkbox"}></input>maintain 1.7 backwards-compatibility
                    (large file size)
                </label>

                <div className={"flex gap-2"}>
                    <input type={"checkbox"} className={"invisible"}/>
                    <label>
                        <input name={"userName"} type={"text"} placeholder={"anon (valid igns only)"}></input>
                    </label>
                </div>

                <div className={"flex gap-4"}>
                    <div className={"flex flex-col gap-4"}>
                        <label className={"nextButton"}>
                            upload packs {/*TODO icon?*/}
                            <input hidden multiple type="file" onChange={e => {
                                const packs = e.target.files;
                                if (!packs)
                                    alert("invalid upload")
                                // TODO -> refresh (?)
                                else {
                                    const formData = new FormData(e.target.form!) // TODO -> this form shit was a bad idea
                                    formData.set("packNameWatermark", formData.get("packNameWatermark") || "(1.21.4)") // TODO -> this doesn't handle " "
                                    formData.set("packDescriptionWatermark", formData.get("packDescriptionWatermark") || "(generated by pvputils.vercel.app, v" + VERSION + ")")
                                    const packDefault = formData.get("defaultPack");
                                    const pack64 = formData.get("64xPack")
                                    const pack32 = formData.get("32xPack");
                                    const pack16 = formData.get("16xPack");
                                    const packUpdateWorkerFormData: PackUpdateWorkerFormData = {
                                        blendMode: formData.get("blendMode") === "multiply"
                                            ? "multiply"
                                            : "overlay",
                                        defaultPack: packDefault instanceof File ? packDefault : null,
                                        "64xPack": pack64 instanceof File ? pack64 : null,
                                        "32xPack": pack32 instanceof File ? pack32 : null,
                                        "16xPack": pack16 instanceof File ? pack16 : null,
                                        isModernBasePackEnabled: formData.get("isModernBasePackEnabled") !== null,
                                        isBlinkingHeartSpriteRemoved: formData.get("isBlinkingHeartSpriteRemoved") !== null,
                                        isWitherHeartSpriteRecolored: formData.get("isWitherHeartSpriteRecolored") !== null,
                                        isBackwardCompatible: formData.get("isBackwardCompatible") !== null,
                                        packDescriptionWatermark: formData.get("isPackDescriptionWatermarkEnabled")
                                            ? formData.get("packDescriptionWatermark")?.toString()
                                            : null,
                                        isNetheriteWeapons: formData.get("isNetheriteWeapons") !== null,
                                        isNetheriteTools: formData.get("isNetheriteTools") !== null,
                                        packNameWatermark: formData.get("isPackNameWatermarkEnabled")
                                            ? formData.get("packNameWatermark")?.toString()
                                            : null,
                                    }
                                    for (const pack of packs) {
                                        const packName = pack.name
                                        if (workersCounter.current < 4) { // TODO -> different handling per device (?)
                                            {
                                                const worker = new Worker(new URL('./packupdateworker.ts', import.meta.url))
                                                worker.onmessage = (e: MessageEvent<PackUpdateWorkerResponse>) => {
                                                    const data = e.data
                                                    setUpdatedPacks(currentUpdatedPacks => [data, ...currentUpdatedPacks])
                                                    setPackUpdaterMessages(current => [data.updatedPackName + " finished", ...current])
                                                    const next = tasks.current.pop()
                                                    if (next) {
                                                        worker.postMessage(next)
                                                        setPackUpdaterMessages(current => [next.packName + " started", ...current])
                                                    } else {
                                                        worker.terminate()
                                                        workersCounter.current = workersCounter.current - 1
                                                    }
                                                }
                                                worker.postMessage({
                                                    pack,
                                                    packName,
                                                    formData: packUpdateWorkerFormData
                                                } as PackUpdateWorkerRequest)
                                            }
                                            workersCounter.current = workersCounter.current + 1
                                            setPackUpdaterMessages(current => [packName + " started", ...current])
                                        } else {
                                            tasks.current.push({pack, packName, formData: packUpdateWorkerFormData})
                                            setPackUpdaterMessages(current => [pack.name + " queued", ...current])
                                        }
                                    }
                                }
                            }}/>
                        </label>
                        <ul className={"flex flex-col gap-2 grow font-[family-name:var(--font-geist-mono)]"}> {/*TODO -> this scrolls and it's height is determined by updatedPacks ol height*/}
                            {packUpdaterMessages.map((message) => (
                                <li key={message}> {/*TODO -> this shouldn't remove any repeat messages*/}
                                    {message}
                                </li>
                            ))}
                        </ul>
                    </div>
                    <div className={"flex flex-col gap-4 grow"}>
                        {updatedPacks.length > 0 && (
                            <button className={"nextButton"}>
                                download {updatedPacks.length}/{updatedPacks.length + workersCounter.current + tasks.current.length}
                            </button>
                        )}
                        <ol className={"font-[family-name:var(--font-geist-mono)]"} reversed>
                            {updatedPacks.map((pack) => (
                                <li key={pack.updatedPackName}>
                                    <a href={URL.createObjectURL(pack.updatedPack)} download={pack.updatedPackName}
                                       style={{color: 'blue', textDecoration: 'underline'}}>
                                        {pack.updatedPackName}
                                    </a>
                                </li>
                            ))}
                        </ol>
                        {/*TODO -> just make this a link to the bucket*/}
                    </div>
                </div>
            </form>
            <ol>
                {history.map(data => (
                    <li key={data.id}>{data.name} converted {data.pack_names}</li>
                ))}
            </ol>
        </div>
    )
}

function handleCheckboxHiddenVanillaDiv(divId: string, e: ChangeEvent<HTMLInputElement>) {
    const div = document.getElementById(divId);
    if (div)
        div.hidden = !e.target.checked;
}