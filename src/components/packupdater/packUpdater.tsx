'use client';
import React, {ChangeEvent, useRef, useState} from "react";
import {PackUpdateWorkerRequest, PackUpdateWorkerResponse} from './types';

const VERSION = 0.9
export default function PackUpdater() {
    const [updatedPacks, setUpdatedPacks] = useState<PackUpdateWorkerResponse[]>([]);
    const [packUpdaterMessages, setPackUpdaterMessages] = useState<string[]>([]);
    const workersCounter = useRef(0)
    const tasks = useRef<PackUpdateWorkerRequest[]>([])
    return (
        <div className={"flex gap-4"}>
            <form className={"flex flex-col gap-4"}>
                <div className={"flex gap-2"}>
                    <label className={"flex gap-2"}>
                        <input name={"isPackNameWatermarkEnabled"} defaultChecked type={"checkbox"} />pack name watermark <i>customizable</i>
                    </label>
                    <label className={"flex gap-2"}>
                        <input name={"packNameWatermark"} placeholder={"(1.21.4)"} type={"text"} onClick={e => {
                            const target = e.currentTarget
                            if (!target.value)
                                target.value = target.placeholder
                        }}/>
                    </label>
                </div>

                <div className={"flex flex-col gap-2"}>
                    <label className={"flex gap-2"}>
                        <input name={"isPackDescriptionWatermarkEnabled"} defaultChecked type={"checkbox"}/>pack description watermark <i>customizable</i>
                    </label>
                    <label className={"flex gap-2"}>
                        <input name={"packDescriptionWatermark"} placeholder={"(generated by pvputils.vercel.app, v" + VERSION + ")"} type={"text"} onClick={e => {
                            const target = e.currentTarget
                            if (!target.value)
                                target.value = target.placeholder // TODO -> I can't do this in a function because im too stupid
                        }}/>
                    </label>
                </div>

                <label className={"flex gap-2"}>
                    <input name={"isNetheriteWeapons"} defaultChecked type={"checkbox"} onChange={e =>
                        handleCheckboxHiddenVanillaDiv("generatedNetheriteConfig", e)}></input>generate netherite by recoloring pack&#39;s diamond
                </label>
                <div id={"generatedNetheriteConfig"} className={"flex gap-4"}>
                    ...
                    <div className={"flex gap-2"}>
                        <label className={"flex gap-2"}>
                            <input name={"blendMode"} defaultChecked type={"radio"}/>multiply (darker)
                        </label>
                        <label className={"flex gap-2"}>
                            <input name={"blendMode"} type={"radio"}/>overlay (lighter)
                        </label>
                        <label className={"flex gap-2"}>
                            <input name={"isNetheriteTools"} type={"checkbox"}/>tools included
                        </label>
                    </div>
                </div>
                {/*<label className={"flex gap-2"}>*/}
                {/*    <input type={"text"}/>*/}
                {/*</label>TODO -> custom netherite colors option*/}

                <label className={"flex gap-2"}>
                    <input name={"isBlinkingHeartSpriteRemoved"} defaultChecked type={"checkbox"}></input>remove blinking heart sprites
                </label>
                <label className={"flex gap-2"}>
                    <input name={"isWitherHeartSpriteRecolored"} defaultChecked type={"checkbox"}></input>recolor wither heart sprites white
                </label>
                {/*TODO -> choose wither heart recolor color*/}
                {/*<label className={"flex gap-2"}>*/}
                {/*    <input defaultChecked type={"checkbox"}></input>*/}
                {/*    make string red*/}
                {/*</label>TODO remove, pretty sure you can pearl through string now anyway*/}

                <label className={"flex gap-2"}>
                    <input name={"isModernBasePackEnabled"} type={"checkbox"} onChange={e =>
                        handleCheckboxHiddenVanillaDiv("hiddenBasePackUploads", e)}></input>
                    use modern base pack <span>(<a href={"https://faithfulpack.net/"} target={"_blank"} style={{ color: "blue", textDecoration: 'underline' }}>faithful</a> recommended)</span>
                </label>
                <div id={"hiddenBasePackUploads"} hidden={true} className={"flex gap-4"}>
                    ...
                    <div className={"flex flex-col gap-2"}>
                        <label className={"flex gap-2"}>
                            default<input name={"defaultPack"} type={"file"}></input>
                        </label>
                        <label className={"flex gap-2"}>
                            if 16x16<input name={"16xPack"} type={"file"}></input>
                        </label>
                        <label className={"flex gap-2"}>
                            else if 32x32<input name={"32xPack"} type={"file"}></input>
                        </label>
                        <label className={"flex gap-2"}>
                            else if 64x64+<input name={"64xPack"} type={"file"}></input>
                        </label>
                        <i title={"based on grass_top.png"}>
                            updater picks from these, if present, for each pack
                        </i>
                    </div>
                </div>

                <label className={"flex gap-2"}>
                    <input name={"isBackwardCompatible"} type={"checkbox"}></input>maintain 1.7 backwards-compatibility (larger file size)
                </label>

                <label className={"flex gap-2"}>
                    <input name={"userName"} type={"text"} placeholder={"anon (valid igns only)"}></input>
                </label>

                <label className={"nextButton"}>
                    upload packs {/*TODO icon?*/}
                    <input hidden multiple type="file" onChange={e =>
                    {
                        const packs = e.target.files;
                        if (!packs)
                            alert("invalid upload")
                        // TODO -> refresh (?)
                        else {
                            const formData = new FormData(e.target.form!)
                            formData.set("packNameWatermark", formData.get("packNameWatermark") || "(1.21.4)") // TODO -> this doesn't handle " "
                            formData.set("packDescriptionWatermark", formData.get("packDescriptionWatermark") || "(generated by pvputils.vercel.app, v" + VERSION + ")")
                            for (const pack of packs) {
                                const packName = pack.name
                                if (workersCounter.current < 4) { // TODO -> different handling per device (?)
                                    {
                                        const worker = new Worker(new URL('./packupdateworker.ts', import.meta.url))
                                        worker.onmessage = (e: MessageEvent<PackUpdateWorkerResponse>) => {
                                            const data = e.data
                                            setUpdatedPacks(currentUpdatedPacks => [data, ...currentUpdatedPacks])
                                            setPackUpdaterMessages(current => [data.updatedPackName + " finished", ...current])
                                            const next = tasks.current.pop()
                                            if (next) {
                                                worker.postMessage(next)
                                                setPackUpdaterMessages(current => [next.packName + " started", ...current])
                                            } else {
                                                worker.terminate()
                                                workersCounter.current = workersCounter.current - 1
                                            }
                                        }
                                        worker.postMessage({pack, packName, formData} as PackUpdateWorkerRequest)
                                    }
                                    workersCounter.current = workersCounter.current + 1
                                    setPackUpdaterMessages(current => [packName + " started", ...current])
                                } else {
                                    tasks.current.push({pack, packName, formData})
                                    setPackUpdaterMessages(current => [pack.name + " queued", ...current])
                                }
                            }
                        }
                    }}/>
                </label>
            </form>
            <div className={"flex flex-col gap-4 grow"}>
                <ul className={"font-[family-name:var(--font-geist-mono)]"}> {/*TODO -> this scrolls and it's height is determined by updatedPacks ol height*/}
                    {packUpdaterMessages.map((message) => (
                        <li key={message}> {/*TODO -> this shouldn't remove any repeat messages*/}
                            {message}
                        </li>
                    ))}
                </ul>
            </div>
            <div className={"flex flex-col gap-4 grow"}>
                {updatedPacks.length > 0 && (
                    <button className={"nextButton"}>
                        download {updatedPacks.length}/{updatedPacks.length + workersCounter.current + tasks.current.length}
                    </button>
                )}
                <ol className={"font-[family-name:var(--font-geist-mono)]"} reversed>
                    {updatedPacks.map((pack) => (
                        <li key={pack.updatedPackName}>
                            <a href={URL.createObjectURL(pack.updatedPack)} download={pack.updatedPackName}
                               style={{color: 'blue', textDecoration: 'underline'}}>
                                {pack.updatedPackName}
                            </a>
                        </li>
                    ))}
                </ol>
                {/*TODO -> just make this a link to the bucket*/}
            </div>
        </div>
    )
}
function handleCheckboxHiddenVanillaDiv(divId: string, e: ChangeEvent<HTMLInputElement>) {
    const div = document.getElementById(divId);
    if (div)
        div.hidden = !e.target.checked;
}